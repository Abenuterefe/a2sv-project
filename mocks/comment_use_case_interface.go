// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Abenuterefe/a2sv-project/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// CommentUseCaseInterface is an autogenerated mock type for the CommentUseCaseInterface type
type CommentUseCaseInterface struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, comment, userID, blogID
func (_m *CommentUseCaseInterface) CreateComment(ctx context.Context, comment *entities.Comment, userID string, blogID string) error {
	ret := _m.Called(ctx, comment, userID, blogID)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Comment, string, string) error); ok {
		r0 = rf(ctx, comment, userID, blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *CommentUseCaseInterface) DeleteComment(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: ctx, id
func (_m *CommentUseCaseInterface) GetCommentByID(ctx context.Context, id string) (*entities.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *entities.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByBlogID provides a mock function with given fields: ctx, blogID
func (_m *CommentUseCaseInterface) GetCommentsByBlogID(ctx context.Context, blogID string) ([]*entities.Comment, error) {
	ret := _m.Called(ctx, blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByBlogID")
	}

	var r0 []*entities.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Comment, error)); ok {
		return rf(ctx, blogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Comment); ok {
		r0 = rf(ctx, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, comment
func (_m *CommentUseCaseInterface) UpdateComment(ctx context.Context, comment *entities.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommentUseCaseInterface creates a new instance of CommentUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentUseCaseInterface {
	mock := &CommentUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
