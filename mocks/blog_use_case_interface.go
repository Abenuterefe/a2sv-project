// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Abenuterefe/a2sv-project/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// BlogUseCaseInterface is an autogenerated mock type for the BlogUseCaseInterface type
type BlogUseCaseInterface struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: ctx, blog, userID
func (_m *BlogUseCaseInterface) CreateBlog(ctx context.Context, blog *entities.Blog, userID string) error {
	ret := _m.Called(ctx, blog, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Blog, string) error); ok {
		r0 = rf(ctx, blog, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlog provides a mock function with given fields: ctx, id
func (_m *BlogUseCaseInterface) DeleteBlog(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlogs provides a mock function with given fields: ctx, filter
func (_m *BlogUseCaseInterface) FilterBlogs(ctx context.Context, filter *entities.BlogFilter) (*entities.FilterResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FilterBlogs")
	}

	var r0 *entities.FilterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogFilter) (*entities.FilterResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogFilter) *entities.FilterResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.FilterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.BlogFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: ctx, id
func (_m *BlogUseCaseInterface) GetBlogByID(ctx context.Context, id string) (*entities.Blog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *entities.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Blog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Blog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogsByUserID provides a mock function with given fields: ctx, userID, page, limit
func (_m *BlogUseCaseInterface) GetBlogsByUserID(ctx context.Context, userID string, page int64, limit int64) ([]*entities.Blog, error) {
	ret := _m.Called(ctx, userID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogsByUserID")
	}

	var r0 []*entities.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]*entities.Blog, error)); ok {
		return rf(ctx, userID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []*entities.Blog); ok {
		r0 = rf(ctx, userID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, userID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPopularBlogs provides a mock function with given fields: ctx, limit
func (_m *BlogUseCaseInterface) GetPopularBlogs(ctx context.Context, limit int64) ([]*entities.BlogWithPopularity, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularBlogs")
	}

	var r0 []*entities.BlogWithPopularity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entities.BlogWithPopularity, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entities.BlogWithPopularity); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.BlogWithPopularity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBlogs provides a mock function with given fields: ctx, search
func (_m *BlogUseCaseInterface) SearchBlogs(ctx context.Context, search *entities.BlogSearch) (*entities.SearchResponse, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlogs")
	}

	var r0 *entities.SearchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogSearch) (*entities.SearchResponse, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogSearch) *entities.SearchResponse); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.SearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.BlogSearch) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: ctx, blog
func (_m *BlogUseCaseInterface) UpdateBlog(ctx context.Context, blog *entities.Blog) error {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Blog) error); ok {
		r0 = rf(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogUseCaseInterface creates a new instance of BlogUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogUseCaseInterface {
	mock := &BlogUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
