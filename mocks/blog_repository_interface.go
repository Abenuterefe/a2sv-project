// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Abenuterefe/a2sv-project/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepositoryInterface is an autogenerated mock type for the BlogRepositoryInterface type
type BlogRepositoryInterface struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: ctx, blog
func (_m *BlogRepositoryInterface) CreateBlog(ctx context.Context, blog *entities.Blog) error {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Blog) error); ok {
		r0 = rf(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlog provides a mock function with given fields: ctx, id
func (_m *BlogRepositoryInterface) DeleteBlog(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlogs provides a mock function with given fields: ctx, filter
func (_m *BlogRepositoryInterface) FilterBlogs(ctx context.Context, filter *entities.BlogFilter) ([]*entities.Blog, int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FilterBlogs")
	}

	var r0 []*entities.Blog
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogFilter) ([]*entities.Blog, int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogFilter) []*entities.Blog); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.BlogFilter) int64); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *entities.BlogFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllBlogs provides a mock function with given fields: ctx
func (_m *BlogRepositoryInterface) GetAllBlogs(ctx context.Context) ([]*entities.Blog, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlogs")
	}

	var r0 []*entities.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.Blog, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Blog); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: ctx, id
func (_m *BlogRepositoryInterface) GetBlogByID(ctx context.Context, id string) (*entities.Blog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *entities.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Blog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Blog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogsByUserID provides a mock function with given fields: ctx, userID, page, limit
func (_m *BlogRepositoryInterface) GetBlogsByUserID(ctx context.Context, userID string, page int64, limit int64) ([]*entities.Blog, error) {
	ret := _m.Called(ctx, userID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogsByUserID")
	}

	var r0 []*entities.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]*entities.Blog, error)); ok {
		return rf(ctx, userID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []*entities.Blog); ok {
		r0 = rf(ctx, userID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, userID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBlogs provides a mock function with given fields: ctx, search
func (_m *BlogRepositoryInterface) SearchBlogs(ctx context.Context, search *entities.BlogSearch) ([]*entities.BlogWithAuthor, int64, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlogs")
	}

	var r0 []*entities.BlogWithAuthor
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogSearch) ([]*entities.BlogWithAuthor, int64, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogSearch) []*entities.BlogWithAuthor); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.BlogWithAuthor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.BlogSearch) int64); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *entities.BlogSearch) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBlog provides a mock function with given fields: ctx, blog
func (_m *BlogRepositoryInterface) UpdateBlog(ctx context.Context, blog *entities.Blog) error {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Blog) error); ok {
		r0 = rf(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlogCounters provides a mock function with given fields: ctx, blogID, likeChange, dislikeChange, viewChange
func (_m *BlogRepositoryInterface) UpdateBlogCounters(ctx context.Context, blogID string, likeChange int, dislikeChange int, viewChange int) error {
	ret := _m.Called(ctx, blogID, likeChange, dislikeChange, viewChange)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogCounters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, int) error); ok {
		r0 = rf(ctx, blogID, likeChange, dislikeChange, viewChange)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogRepositoryInterface creates a new instance of BlogRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepositoryInterface {
	mock := &BlogRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
