// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlogInteractionUseCaseInterface is an autogenerated mock type for the BlogInteractionUseCaseInterface type
type BlogInteractionUseCaseInterface struct {
	mock.Mock
}

// DislikeBlog provides a mock function with given fields: ctx, blogID, userID
func (_m *BlogInteractionUseCaseInterface) DislikeBlog(ctx context.Context, blogID string, userID string) error {
	ret := _m.Called(ctx, blogID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DislikeBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, blogID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeBlog provides a mock function with given fields: ctx, blogID, userID
func (_m *BlogInteractionUseCaseInterface) LikeBlog(ctx context.Context, blogID string, userID string) error {
	ret := _m.Called(ctx, blogID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikeBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, blogID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ViewBlog provides a mock function with given fields: ctx, blogID, userID, ipAddress, userAgent
func (_m *BlogInteractionUseCaseInterface) ViewBlog(ctx context.Context, blogID string, userID string, ipAddress string, userAgent string) error {
	ret := _m.Called(ctx, blogID, userID, ipAddress, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for ViewBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, blogID, userID, ipAddress, userAgent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogInteractionUseCaseInterface creates a new instance of BlogInteractionUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogInteractionUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogInteractionUseCaseInterface {
	mock := &BlogInteractionUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
