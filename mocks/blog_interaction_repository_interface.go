// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Abenuterefe/a2sv-project/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// BlogInteractionRepositoryInterface is an autogenerated mock type for the BlogInteractionRepositoryInterface type
type BlogInteractionRepositoryInterface struct {
	mock.Mock
}

// AddInteraction provides a mock function with given fields: ctx, interaction
func (_m *BlogInteractionRepositoryInterface) AddInteraction(ctx context.Context, interaction *entities.BlogInteraction) error {
	ret := _m.Called(ctx, interaction)

	if len(ret) == 0 {
		panic("no return value specified for AddInteraction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.BlogInteraction) error); ok {
		r0 = rf(ctx, interaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasInteraction provides a mock function with given fields: ctx, blogID, userID, interactionType
func (_m *BlogInteractionRepositoryInterface) HasInteraction(ctx context.Context, blogID string, userID string, interactionType string) (bool, error) {
	ret := _m.Called(ctx, blogID, userID, interactionType)

	if len(ret) == 0 {
		panic("no return value specified for HasInteraction")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, blogID, userID, interactionType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, blogID, userID, interactionType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, blogID, userID, interactionType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasRecentView provides a mock function with given fields: ctx, blogID, userID, ipAddress, userAgent
func (_m *BlogInteractionRepositoryInterface) HasRecentView(ctx context.Context, blogID string, userID string, ipAddress string, userAgent string) (bool, error) {
	ret := _m.Called(ctx, blogID, userID, ipAddress, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for HasRecentView")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (bool, error)); ok {
		return rf(ctx, blogID, userID, ipAddress, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) bool); ok {
		r0 = rf(ctx, blogID, userID, ipAddress, userAgent)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, blogID, userID, ipAddress, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInteraction provides a mock function with given fields: ctx, blogID, userID, interactionType
func (_m *BlogInteractionRepositoryInterface) RemoveInteraction(ctx context.Context, blogID string, userID string, interactionType string) error {
	ret := _m.Called(ctx, blogID, userID, interactionType)

	if len(ret) == 0 {
		panic("no return value specified for RemoveInteraction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, blogID, userID, interactionType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogInteractionRepositoryInterface creates a new instance of BlogInteractionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogInteractionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogInteractionRepositoryInterface {
	mock := &BlogInteractionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
