// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entities "github.com/Abenuterefe/a2sv-project/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: userID, role
func (_m *AuthService) CreateAccessToken(userID string, role string) (string, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: userID
func (_m *AuthService) CreateRefreshToken(userID string) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenStr, isAccess
func (_m *AuthService) VerifyToken(tokenStr string, isAccess bool) (*entities.JWTClaims, error) {
	ret := _m.Called(tokenStr, isAccess)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *entities.JWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (*entities.JWTClaims, error)); ok {
		return rf(tokenStr, isAccess)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *entities.JWTClaims); ok {
		r0 = rf(tokenStr, isAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(tokenStr, isAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
